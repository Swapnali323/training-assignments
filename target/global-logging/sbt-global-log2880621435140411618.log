[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\swapjadh\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\swapjadh\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.6 (Oracle Corporation Java 12)
[debug]       Load.loadUnit: plugins took 195.106ms
[debug]       Load.loadUnit: defsScala took 0.5688ms
[debug] [Loading] Scanning directory C:\Users\swapjadh\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\swapjadh\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 36.953 ms
[debug]           Load.resolveProject(global-plugins) took 91.427601ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\swapjadh\.sbt\1.0\plugins, plugins: List(<none>))) took 187.8441ms
[debug] [Loading] Done in C:\Users\swapjadh\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 233.0931ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3939ms
[debug]     Load.loadUnit(file:/C:/Users/swapjadh/.sbt/1.0/plugins/, ...) took 447.2134ms
[debug]   Load.apply: load took 791.537599ms
[debug]   Load.apply: resolveProjects took 12.046101ms
[debug]   Load.apply: finalTransforms took 125.094001ms
[debug]   Load.apply: config.delegates took 23.1846ms
[debug]   Load.apply: Def.make(settings)... took 3031.9943ms
[debug]   Load.apply: structureIndex took 167.0959ms
[debug]   Load.apply: mkStreams took 2.2439ms
[info] loading global plugins from C:\Users\swapjadh\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 7521.7077ms
[debug]           Load.loadUnit: plugins took 53.585499ms
[debug]           Load.loadUnit: defsScala took 0.014001ms
[debug] [Loading] Scanning directory C:\Users\swapjadh\IdeaProjects\training\project
[debug]             Load.loadUnit: mkEval took 28.1162ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\swapjadh\IdeaProjects\training\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.0651 ms
[info] loading settings for project training-build from idea.sbt ...
[debug]               Load.resolveProject(training-build) took 5.8292ms
[debug]             Load.loadTransitive: finalizeProject(Project(id training-build, base: C:\Users\swapjadh\IdeaProjects\training\project, plugins: List(<none>))) took 10.930199ms
[debug] [Loading] Done in C:\Users\swapjadh\IdeaProjects\training\project, returning: (training-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4305.8561ms
[debug]           Load.loadUnit: cleanEvalClasses took 19.5327ms
[debug]         Load.loadUnit(file:/C:/Users/swapjadh/IdeaProjects/training/project/, ...) took 4382.547799ms
[debug]       Load.apply: load took 4385.4568ms
[debug]       Load.apply: resolveProjects took 0.168499ms
[debug]       Load.apply: finalTransforms took 19.7189ms
[debug]       Load.apply: config.delegates took 0.656299ms
[debug]       Load.apply: Def.make(settings)... took 226.6518ms
[debug]       Load.apply: structureIndex took 59.1919ms
[debug]       Load.apply: mkStreams took 0.003101ms
[info] loading project definition from C:\Users\swapjadh\IdeaProjects\training\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 7047.2704ms
[debug]     Load.loadUnit: defsScala took 0.0068ms
[debug] [Loading] Scanning directory C:\Users\swapjadh\IdeaProjects\training
[debug]       Load.loadUnit: mkEval took 2.1189ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\swapjadh\IdeaProjects\training, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.9324 ms
[info] loading settings for project training from build.sbt ...
[debug]         Load.resolveProject(training) took 51.075199ms
[debug]       Load.loadTransitive: finalizeProject(Project(id training, base: C:\Users\swapjadh\IdeaProjects\training, plugins: List(<none>))) took 55.813399ms
[debug] [Loading] Done in C:\Users\swapjadh\IdeaProjects\training, returning: (training)
[debug]     Load.loadUnit: loadedProjectsRaw took 2495.146299ms
[debug]     Load.loadUnit: cleanEvalClasses took 110.259099ms
[debug]   Load.loadUnit(file:/C:/Users/swapjadh/IdeaProjects/training/, ...) took 9654.6332ms
[debug] Load.apply: load took 9658.17ms
[debug] Load.apply: resolveProjects took 0.236699ms
[debug] Load.apply: finalTransforms took 45.668399ms
[debug] Load.apply: config.delegates took 0.560699ms
[debug] Load.apply: Def.make(settings)... took 145.875501ms
[debug] Load.apply: structureIndex took 45.7536ms
[debug] Load.apply: mkStreams took 0.0039ms
[info] set current project to training (in build file:/C:/Users/swapjadh/IdeaProjects/training/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58674 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58674, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to training (in build file:/C:/Users/swapjadh/IdeaProjects/training/)
[debug] > Exec(idea-shell, None, None)
